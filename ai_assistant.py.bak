# ------------------- STREAMLIT APP -------------------
def app():
    st.title("🌾 AI Assistant for Farmers")

    # Determine user type
    logged_in = st.session_state.get("logged_in", False)
    username = st.session_state.user["username"] if logged_in else "Guest"

    # Load previous chats for logged-in users
    if logged_in and GOOGLE_SHEET_ENABLED and not st.session_state.get("user_chats"):
        st.session_state.user_chats = load_user_chats(username)
    elif not logged_in and "guest_chats" not in st.session_state:
        st.session_state.guest_chats = {}

    # Initialize session variables
    if "current_topic" not in st.session_state:
        st.session_state.current_topic = "New Chat"
    if "ai_history" not in st.session_state:
        st.session_state.ai_history = []

    topic = st.session_state.current_topic

    # Load ai_history from existing topic if not new
    if topic != "New Chat" and not st.session_state.ai_history:
        chats = st.session_state.user_chats.get(topic, []) if logged_in else st.session_state.guest_chats.get(topic, [])
        st.session_state.ai_history = chats.copy()

    st.subheader(f"📘 Topic: {topic}")

    # Show previous chat
    if st.session_state.ai_history:
        for msg in st.session_state.ai_history:
            st.markdown(f"**🧑‍🌾 You:** {msg['question']}")
            st.markdown(f"**🤖 AI:** {msg['answer']}")
            st.markdown("---")
    else:
        st.info("💬 Start chatting below!")

    # User input
    user_input = st.chat_input("💬 Type your question here...")

    if user_input:
        st.session_state["pending_input"] = user_input
        st.rerun()

    # Process pending input
    if "pending_input" in st.session_state:
        question = st.session_state["pending_input"]
        del st.session_state["pending_input"]

        history = st.session_state.ai_history.copy()
        answer, _ = ask_ai(question, history)

        chat_entry = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "question": question,
            "answer": answer
        }

        # Add to ai_history and topic-specific chats
        st.session_state.ai_history.append(chat_entry)
        if logged_in:
            st.session_state.user_chats.setdefault(topic, []).append(chat_entry)
            save_chat(username, topic, question, answer)  # Persist to Google Sheet
        else:
            st.session_state.guest_chats.setdefault(topic, []).append(chat_entry)  # Session only

        # Auto-generate topic for first message if new chat
        if topic == "New Chat" and len(st.session_state.ai_history) == 1:
            new_topic = generate_topic(question, answer, list(st.session_state.user_chats.keys()) if logged_in else [])
            if logged_in:
                st.session_state.user_chats[new_topic] = st.session_state.user_chats.pop("New Chat")
            else:
                st.session_state.guest_chats[new_topic] = st.session_state.guest_chats.pop("New Chat")
            st.session_state.current_topic = new_topic
            topic = new_topic

        # Display instantly
        with st.chat_message("user"):
            st.markdown(question)
        with st.chat_message("assistant"):
            st.markdown(answer)